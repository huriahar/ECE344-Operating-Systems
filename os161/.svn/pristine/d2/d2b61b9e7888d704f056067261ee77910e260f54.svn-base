#ifndef _VM_H_
#define _VM_H_

#include <machine/vm.h>


paddr_t phys_addr_start;
paddr_t phys_addr_end;

unsigned long pages_avail;

typedef enum {
	freed,
	dirty,
	fixed,
	clean
} pstate_t;

struct cmap_entry{
	struct addrspace* as;
	paddr_t pa;
	pstate_t state;
	int first_page;
	int num_pages;
};


/* Fault-type arguments to vm_fault() */
#define VM_FAULT_READ        0    /* A read was attempted */
#define VM_FAULT_WRITE       1    /* A write was attempted */
#define VM_FAULT_READONLY    2    /* A write to a readonly page was attempted*/


/* Initialization function */
void vm_bootstrap(void);
paddr_t getppages(unsigned long npages);

/* Fault handling function called by trap code */
int vm_fault(int faulttype, vaddr_t faultaddress);

/* Allocate/free kernel heap pages (called by kmalloc/kfree) */
vaddr_t alloc_kpages(int npages);
void free_kpages(vaddr_t addr);

#endif /* _VM_H_ */
